version: '3.6'
services:
  postgres:
    image: postgres:12
    restart: always
    volumes:
    ## here db_data is the host volume which must be same as in the volumes at the end of the file
    ## when the postgres container is restarted all the data is lost so for data persistency we mount the volumes
    ## docker exec -it [postgres container id] sh will take us inside the container terminal and theh inside /var/lib/postgresql/data is the data
    - ./db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgrespassword
  graphql-engine:
    image: hasura/graphql-engine:v2.6.0
    ports:
    - "8080:8080"
    depends_on:
    - "postgres"
    restart: always
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      ## enable the console served by server
      ## set to "false" to disable console
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to set an admin secret
      ## HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
  web:
    ## if the image is hosted on aws ecr then add the ecr repo url or if the image is in docker hub then also add the image link with image: [url]
    build: ./app
    ## this command below will overwrite the "CMD" parameter we set inside the Dockerfile, even if we set an environment parameter in this docker-compose file, that would also
    ## overwrite the "ENV" parameter in the Dockerfile
    command: npm run start
    volumes:
      ## "ro" in the volume binding with allowing the container read-only perms, ie the new files/dirs created in the local env will write into docker ie local env has write perms
      ## docker but docker only has read-only perms to local env, ie if we "run docker exec -it [contId] sh" into the container and "touch newFile" in the container then that new
      ## file wont be craeted in the local env but the reverse will happen as local env has write perms into docker
      - ./app:/app:ro
      - ./app/node_modules:/app/node_modules
    ## the node app will be opening on two ports
    ports:
      - "3000:3000"
      - "3001:3001"
    depends_on:
      - postgres
volumes:
  db_data:
